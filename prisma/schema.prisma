datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(uuid())
  clerkId   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique

  isadmin   Boolean @default(false)
  isTeacher Boolean @default(false)
  isStudent Boolean @default(false)

  studentStatusExpiresAt DateTime?

  image       String? @db.Text
  nickname    String? @unique
  country     String?
  description String? @db.Text
  linkedIn    String? @db.Text
  facebook    String? @db.Text
  youtube     String? @db.Text
  twitter     String? @db.Text
  whatsapp    String?
  instagram   String?
  mail        String?
}

model GAP {
  id        String   @id @default(uuid())
  userid    String   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title           String
  companyLogo     String? @db.Text
  year            String?
  institutionName String?
  proffesorName   String?
  city            String?
  district        String?

  regulatoryBasis      String? @db.Text
  graduateProfile      String? @db.Text
  crosscuttingApproach String? @db.Text

  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])

  ageid      String?
  averageAge AverageAge? @relation(fields: [ageid], references: [id])

  academyid    String?
  academyLevel Academy? @relation(fields: [academyid], references: [id])

  courseid   String?
  courseName Course? @relation(fields: [courseid], references: [id])

  educationid    String?
  educationLevel EducationLevel? @relation(fields: [educationid], references: [id])

  characteristics   String? @db.Text
  recommendations   String? @db.Text
  values            String? @db.Text
  attitudes         String? @db.Text
  acdescription     String? @db.Text
  learningPurposes  String? @db.Text
  methodsStrategies String? @db.Text
  materials         String? @db.Text
  resources         String? @db.Text
  bibliography      String? @db.Text

  isSigned     Boolean @default(false)
  isDownloaded Boolean @default(false)
  isPublished  Boolean @default(false)
  isConverted  Boolean @default(false)

  @@index([educationid])
  @@index([courseid])
  @@index([ageid])
  @@index([departmentId])
  @@index([academyid])
}

model EducationLevel {
  id   String @id @default(uuid())
  name String
  gaps GAP[]
}

model Course {
  id   String @id @default(uuid())
  name String
  gaps GAP[]
}

model AverageAge {
  id   String @id @default(uuid())
  name String
  gaps GAP[]
}

model Academy {
  id   String @id @default(uuid())
  name String
  gaps GAP[]
}

model Department {
  id   String @id @default(uuid())
  name String
  gaps GAP[]
}

model Experience {
  id String @id @default(uuid())

  userid    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Input
  title            String
  trimester String?
  prof_name        String?
  date             String?
  characterization String?

  psecharacteristics String? @db.Text
  piccharacteristics String? @db.Text
  pnpcharacteristics String? @db.Text

  //dropdown
  academicid     String?
  academic_level AcademicLevel_experience? @relation(fields: [academicid], references: [id])

  ageid      String?
  averageAge AverageAge_experience? @relation(fields: [ageid], references: [id])

  courseid    String?
  course_name Course_experience? @relation(fields: [courseid], references: [id])
  
  educationid     String?
  education_level EducationLevel__experience? @relation(fields: [educationid], references: [id])

  //AI
  reality_context     String? @db.Text
  question_ai         String? @db.Text
  skills              String? @db.Text
  evaluation_criteria String? @db.Text
  thematic_fields     String? @db.Text
  product             String? @db.Text
  eval_instrument     String? @db.Text
  sequence_activities String? @db.Text
  methods_strategies  String? @db.Text
  materials           String? @db.Text
  resources           String? @db.Text
  bibliography        String? @db.Text

  sessions Session[]

  @@index([ageid])
  @@index([academicid])
  @@index([courseid])
  @@index([educationid])
}

model Course_experience {
  id         String       @id @default(uuid())
  name       String
  experience Experience[]
}

model AverageAge_experience {
  id         String       @id @default(uuid())
  name       String
  experience Experience[]
}

model EducationLevel__experience {
  id         String       @id @default(uuid())
  name       String
  experience Experience[]
}

model AcademicLevel_experience {
  id         String       @id @default(uuid())
  name       String
  experience Experience[]
}

model Session {
  id String @id @default(uuid())
  userid           String 
  title            String

  experienceid     String?
  experience Experience? @relation(fields: [experienceid ], references: [id])


  logo     String?
  year             String?
  institution_name String?
  date             String?

  courseid      String?
  course_name SessionCourse? @relation(fields: [courseid], references: [id])
  prof_name     String?
 

  academicid   String?
  academy AcademicLevel_Session? @relation(fields: [academicid], references: [id])

  educationid  String?
  education_level EducationLevel_Session? @relation(fields: [educationid], references: [id])

  ageid String?
  sessionage sessionAge? @relation(fields: [ageid], references: [id])


  competence       String?
  perfomance       String?
  product           String?
  instrument String?
  him String?

//didactic sequence
//inicio
timeid String?
time SessionTime? @relation(fields: [timeid], references: [id])
motivation String? @db.Text
knowinadvance String? @db.Text
cognitiveconflict String? @db.Text
learningpurpose String? @db.Text
          
//process
theoreticalcontent String? @db.Text
practicalcontent String? @db.Text
complimentaryactivities String? @db.Text

//closing
 assesment        String? @db.Text

  createdAt DateTime @default(now())
  @@index([experienceid ])
  @@index([academicid])
  @@index([courseid])
  @@index([educationid])
  @@index([timeid])
  @@index([ageid])
}

model AcademicLevel_Session{
  id String @id @default(uuid())
  name String
  session Session[]
}

model EducationLevel_Session{
  id String @id @default(uuid())
  name String
  session Session[]
}

model SessionCourse {
  id String @id @default(uuid())
  name String
  session Session[]

}

model SessionTime {
  id String @id @default(uuid()) 
  name String
  session Session[]
}

model sessionAge {
  id String @id @default(uuid())
  name String
  session Session[]
}
