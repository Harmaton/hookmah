datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String         @id @default(uuid())
  clerkId      String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  email        String         @unique
  
  isadmin   Boolean @default(false)
  isTeacher Boolean @default(false)
  isStudent Boolean @default(false)

  studentStatusExpiresAt DateTime?

  image String?   @db.Text
  nickname String? @unique
  country String?
  description String?  @db.Text
  linkedIn String? @db.Text
  facebook String? @db.Text
  youtube String? @db.Text
  twitter String? @db.Text
  whatsapp String?
  instagram String?
  mail String?
}


model GAP {
  id           String         @id @default(uuid())
  userid      String         
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  title String
  companyLogo String? @db.Text 
  year String?
  institutionName String?
  proffesorName String?
  city String?
  district String?

  regulatoryBasis String? @db.Text
  graduateProfile String? @db.Text
  crosscuttingApproach String? @db.Text

  departmentId String?
  department Department? @relation(fields: [departmentId], references: [id])

  ageid String?
  averageAge AverageAge? @relation(fields: [ageid], references: [id])

  academyid String?
  academyLevel Academy? @relation(fields: [academyid], references: [id])

  courseid String?
  courseName Course? @relation(fields: [courseid], references: [id])

  educationid String?
  educationLevel EducationLevel? @relation(fields: [educationid], references: [id])

  characteristics String? @db.Text
  recommendations String? @db.Text
  values String? @db.Text
  attitudes String? @db.Text
  acdescription String? @db.Text
  learningPurposes String? @db.Text
  methodsStrategies String? @db.Text
  materials String? @db.Text
  resources String? @db.Text
  bibliography String? @db.Text

  isSigned Boolean @default(false)
  isDownloaded Boolean @default(false)
  isPublished Boolean @default(false)
  isConverted Boolean @default(false)
  
  @@index([educationid])
  @@index([courseid])
  @@index([ageid])
  @@index([departmentId])
  @@index([academyid])
} 

model EducationLevel{
  id String @id @default(uuid())
  name String
  gaps GAP[]
}


model Course {
  id String @id @default(uuid())
  name String
  gaps GAP[]
}

model AverageAge {
  id String @id @default(uuid())
  name String
  gaps GAP[]
}

model Academy {
  id String @id @default(uuid())
  name String
  gaps GAP[]
}

model Department {
  id String @id @default(uuid())
  name String
  gaps GAP[]
  
}